#!/bin/bash -e

# ways we can be called
# http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html
#
# postinst configure most-recently-configured-version
# old-postinst abort-upgrade new-version
# conflictor's-postinst abort-remove in-favour package new-version
# postinst abort-remove
# deconfigured's-postinst abort-deconfigure in-favour failed-install-package version [removing conflicting-package version]

. /usr/share/debconf/confmodule
db_version 2.0

.  /usr/lib/@package.name@/internal/pkg-helper-functions


configure_paths() {

    chown -R @package.name.clean@:@package.name.clean@ @nuxeo.home.dir@
    chown -R @package.name.clean@:@package.name.clean@ @nuxeo.data.dir@
    chown -R @package.name.clean@:@package.name.clean@ @nuxeo.etc.dir@
    chown -R @package.name.clean@:@package.name.clean@ @nuxeo.log.dir@
    chown -R @package.name.clean@:@package.name.clean@ @nuxeo.pid.dir@

}


setup_postgresql() {

    # Return if we already autoconfigured PostgreSQL
    get_conf_var nuxeo.installer.installedpg
    if [ "$RET" = "true" ]; then
        return
    fi

    # Make a note that we're autoconfiguring PostgreSQL
    set_conf_var nuxeo.installer.installedpg true
    db_set @package.name@/installedpg true

    echo "*** Creating a dedicated database for @package.name@ ***"

    # Change to /tmp to avoid 'could not change directory to "/root"' messages
    pushd /tmp > /dev/null

    # Generate en_US-UTF-8 locale in case it's not in the system yet
    locale-gen --no-purge en_US.UTF-8

    # Check whether nuxeo cluster already exists
    nxcluster=$(pg_lsclusters -h | grep $PGCLUSTER) || true
    if [ -z "$nxcluster" ]; then
        # get highest postgresql version
        # no sort -V on debian yet, using -u. Will need to change for PostgreSQL 10
        pgversion=$(pg_lsclusters -h | sort -u | tail -1 | awk '{print $1}')
        if [ -z "$pgversion" ]; then
            pgversion=$PGDEFAULTVERSION
        fi
        # create cluster
        pg_createcluster --locale=en_US.UTF-8 $pgversion $PGCLUSTER
        # fix postgresql conf
        pgconf="/etc/postgresql/$pgversion/$PGCLUSTER/postgresql.conf"
        perl -p -i -e "s/^#?shared_buffers\s*=.*$/shared_buffers = 100MB/" $pgconf
        perl -p -i -e "s/^#?max_prepared_transactions\s*=.*$/max_prepared_transactions = 32/" $pgconf
        perl -p -i -e "s/^#?effective_cache_size\s*=.*$/effective_cache_size = 1GB/" $pgconf
        perl -p -i -e "s/^#?work_mem\s*=.*$/work_mem = 32MB/" $pgconf
        perl -p -i -e "s/^#?wal_buffers\s*=.*$/wal_buffers = 8MB/" $pgconf
        perl -p -i -e "s/^#?lc_messages\s*=.*$/lc_messages = 'en_US.UTF-8'/" $pgconf
        perl -p -i -e "s/^#?lc_time\s*=.*$/lc_time = 'en_US.UTF-8'/" $pgconf
        perl -p -i -e "s/^#?log_line_prefix\s*=.*$/log_line_prefix = '%t [%p]: [%l-1] '/" $pgconf
        # fix shmmax
        oldshmmod=$(grep 'After nuxeo install' /etc/sysctl.conf) || true
        if [ -z "$oldshmmod" ]; then
            currentmax=$(grep -E "^kernel.shmmax\s*=" /etc/sysctl.conf | tail -n 1 | cut -d= -f2 | tr -d ' ')
            if [ -z "$currentmax" ]; then
                currentmax=$(sysctl kernel.shmmax | cut -d= -f2 | tr -d ' ')
            fi
            newmax=$(($currentmax+268435456)) # Add 256MB
            perl -n -i -e "print unless /^kernel.shmmax\s*=/" /etc/sysctl.conf
            echo "# Do not remove those lines (needed by Nuxeo removal scripts):" >> /etc/sysctl.conf
            echo "# Before nuxeo install: shmmax = $currentmax" >> /etc/sysctl.conf
            echo "# After nuxeo install: shmmax = $newmax" >> /etc/sysctl.conf
            echo "kernel.shmmax = $newmax" >> /etc/sysctl.conf
            sysctl -w kernel.shmmax=$newmax
        fi
        # start cluster
        pg_ctlcluster $pgversion $PGCLUSTER start
    else
        # make sure cluster is started
        pgversion=$(echo $nxcluster | awk '{print $1}')
        pgstatus=$(echo $nxcluster | awk '{print $4}')
        if [ "$pgstatus" != "online" ]; then
            pg_ctlcluster $pgversion $PGCLUSTER start
        fi
    fi

    # Get cluster info to connect to the database
    pgport=$(pg_lsclusters -h | grep $PGCLUSTER | awk '{print $3}')
    pgpass=$(pwgen -c1)

    # Create user,language and functions if missing
    su postgres -c "psql -p $pgport template1 --quiet -t -f-" << EOF > /dev/null
CREATE OR REPLACE FUNCTION mknxuser() RETURNS VOID LANGUAGE SQL AS \$\$
CREATE USER @package.name.clean@ WITH PASSWORD '$pgpass';
\$\$;
SELECT
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_user WHERE usename='@package.name.clean@'
    ) THEN NULL
    ELSE mknxuser()
    END;
DROP FUNCTION mknxuser();

CREATE OR REPLACE FUNCTION mkplpgsql() RETURNS VOID LANGUAGE SQL AS \$\$
CREATE LANGUAGE plpgsql;
\$\$;
SELECT
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_catalog.pg_language WHERE lanname='plpgsql'
    ) THEN NULL
    ELSE mkplpgsql()
    END;
DROP FUNCTION mkplpgsql();

CREATE OR REPLACE FUNCTION mktxtint() RETURNS VOID LANGUAGE SQL AS \$\$
CREATE FUNCTION pg_catalog.text(integer) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int4out(\$1));';
CREATE CAST (integer AS text) WITH FUNCTION pg_catalog.text(integer) AS IMPLICIT;
COMMENT ON FUNCTION pg_catalog.text(integer) IS 'convert integer to text';
\$\$;
SELECT
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_catalog.pg_proc WHERE proname='text' AND prosrc='SELECT textin(int4out(\$1));'
    ) THEN NULL
    ELSE mktxtint()
    END;
DROP FUNCTION mktxtint();

CREATE OR REPLACE FUNCTION mktxtbigint() RETURNS VOID LANGUAGE SQL AS \$\$
CREATE FUNCTION pg_catalog.text(bigint) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int8out(\$1));';
CREATE CAST (bigint AS text) WITH FUNCTION pg_catalog.text(bigint) AS IMPLICIT;
COMMENT ON FUNCTION pg_catalog.text(bigint) IS 'convert bigint to text';
\$\$;
SELECT
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_catalog.pg_proc WHERE proname='text' AND prosrc='SELECT textin(int8out(\$1));'
    ) THEN NULL
    ELSE mktxtbigint()
    END;
DROP FUNCTION mktxtbigint();

EOF

    # Create database if missing
    hasnxdb=$(echo "\\l" | su postgres -c "psql -p $pgport template1 --quiet -t -f-" | awk '{print $1}' | grep "^@package.name.clean@$") || true
    if [ "$hasnxdb" != "@package.name.clean@" ]; then
        su postgres -c "createdb -p $pgport -O @package.name.clean@ -E UTF-8 @package.name.clean@"
    fi

    # Save values in nuxeo.conf
    set_conf_var nuxeo.db.host localhost
    set_conf_var nuxeo.db.port $pgport
    set_conf_var nuxeo.db.name @package.name.clean@
    set_conf_var nuxeo.db.user @package.name.clean@
    set_conf_var nuxeo.db.password $pgpass

    # Switch back to normal directory
    popd > /dev/null

}


configure_nuxeo() {

    # Do the modifications according to choices made in the config script

    db_get @package.name@/bind-address
    set_conf_var nuxeo.bind.address $RET
    db_get @package.name@/http-port
    set_conf_var nuxeo.server.http.port $RET
    db_get @package.name@/ajp-port
    set_conf_var nuxeo.server.ajp.port $RET
    # randomize nuxeo.server.tomcat-admin.port if not set
    get_conf_var nuxeo.server.tomcat-admin.port
    adminport=$RET
    if [ -z "$adminport" ]; then
        validated=false
        while [ $validated = false ]; do
            adminport=$(($(($RANDOM%9999))+50000))
            check_ip_port_free 127.0.0.1 $adminport
            validated=$RET
        done
    fi
    set_conf_var nuxeo.server.tomcat-admin.port $adminport

    db_get @package.name@/database
    dbchoice=$RET
    if [ "$dbchoice" = "$DBEMBEDDED" ]; then
        set_db_template default
        set_conf_var nuxeo.wizard.skippedpages General
    elif [ "$dbchoice" = "$DBAUTOPGSQL" ]; then
        set_db_template postgresql
        set_conf_var nuxeo.installer.useautopg true
        setup_postgresql
        set_conf_var nuxeo.wizard.skippedpages General,DB
    else
        get_conf_var nuxeo.installer.useautopg
        previouschoice=$RET
        set_conf_var nuxeo.installer.useautopg false
        if [ "$previouschoice" != "false" ]; then
            set_conf_var nuxeo.wizard.skippedpages General
            activate_wizard
        fi
    fi

}

configure_office() {

    # Office suite path
    get_conf_var jod.office.home
    if [ -z "$RET" ]; then
        if [ -d /usr/lib/libreoffice ]; then
            set_conf_var jod.office.home /usr/lib/libreoffice
        elif [ -d /usr/lib/openoffice ]; then
            set_conf_var jod.office.home /usr/lib/openoffice
        elif [ -d /opt/openoffice.org3 ]; then
            set_conf_var jod.office.home /opt/openoffice.org3
        fi
    fi

}

activate_wizard() {

    set_conf_var nuxeo.wizard.done false

}

quietnuxeoctl() {

    NXCTLPARAMS=$@
    export NUXEO_CONF
    su @package.name.clean@ -m -c "@nuxeo.home.dir@/bin/nuxeoctl --quiet $NXCTLPARAMS" | grep -v "^Nuxeo home:" | grep -v "Nuxeo configuration:" | grep -v -e "Template .* not found"
    export -n NUXEO_CONF

}

upgrade_marketplace_packages() {

    NEW_DEB_VERSION=$1

    # Lookup saved package states
    declare -A MPSTATES
    declare -A MPIDS
    if [ -f "@nuxeo.etc.dir@/pkglist.cache" ]; then
        mpregex='(started|downloaded)[[:space:]](.*)[[:space:]]\(id: (.*)\)'
        while read -r line; do
            if [[ $line =~ $mpregex ]]; then
                MPSTATES[${BASH_REMATCH[2]}]=${BASH_REMATCH[1]}
                MPIDS[${BASH_REMATCH[2]}]=${BASH_REMATCH[3]}
            fi
        done < @nuxeo.etc.dir@/pkglist.cache
    fi

    # Reset to "downloaded"
    quietnuxeoctl mp-reset
    # Remove the registry until NXP-8174 is resolved
    get_conf_var nuxeo.data.dir
    datadir=$RET
    if [ -z "$datadir" ]; then
        datadir=@nuxeo.data.dir@
    fi
    if [ -f "${datadir}/packages/registry.xml" ]; then
        rm -f "${datadir}/packages/registry.xml"
    fi

    # Remove marketplace base packages
    MPDISTLIST="nuxeo-content-browser nuxeo-content-browser-cmf nuxeo-dm nuxeo-dam nuxeo-cmf nuxeo-sc"
    for distPkg in $MPDISTLIST; do
        MPREVLIST="$distPkg $MPREVLIST"
    done
    echo "*** Removing old base marketplace packages ***"
    PKGTOREMOVE=""
    for distPkg in $MPREVLIST; do
        if [ -n "${MPSTATES[$distPkg]}" ]; then
            PKGTOREMOVE="$PKGTOREMOVE ${MPIDS[$distPkg]}"
        fi
    done
    if [ -n "$PKGTOREMOVE" ]; then
        quietnuxeoctl mp-remove $PKGTOREMOVE
    fi

    # Install new versions of the base marketplace packages in the same state as the old one
    echo "*** Updating base marketplace packages ***"
    WIZPKGDIR="@nuxeo.home.dir@/setupWizardDownloads"
    MPSELECTION=""
    PKGTOADD=""
    NAMESTOADD=""
    PKGTOINSTALL=""
    for distPkg in $MPDISTLIST; do
        MD5=$(cat $WIZPKGDIR/packages.xml | awk "/id=\"$distPkg\"/,/\/>/" | grep -oE 'md5="([^"]*)"' | sed -E 's/md5="(.*)"/\1/') || MD5=""
        if [ -f "$WIZPKGDIR/$MD5" ]; then
            if [ "${MPSTATES[$distPkg]}" = "started" ]; then
                PKGTOINSTALL="$PKGTOINSTALL $WIZPKGDIR/$MD5"
                if [ -n "$MPSELECTION" ]; then
                    MPSELECTION="$MPSELECTION,$distPkg"
                else
                    MPSELECTION="packages=$distPkg"
                fi
            fi
            if [ "${MPSTATES[$distPkg]}" = "downloaded" ]; then
                PKGTOADD="$PKGTOADD $WIZPKGDIR/$MD5"
                NAMESTOADD="$NAMESTOADD $distPkg"
            fi
        else
            if [ "${MPSTATES[$distPkg]}" = "started" ] || [ "${MPSTATES[$distPkg]}" = "downloaded" ]; then
                echo "[ERROR] Missing local package for $distPkg - functionality will not be available"
            fi
        fi
    done
    if [ -n "$PKGTOADD" ]; then
        echo "Adding (but not activating) $NAMESTOADD"
        quietnuxeoctl mp-add $PKGTOADD
    fi
    if [ -n "$PKGTOINSTALL" ]; then
        quietnuxeoctl mp-install $PKGTOINSTALL
    fi

    # Save current selection as wizard preselects
    SELECTIONFILE="$WIZPKGDIR/packages-default-selection.properties"
    echo "#Updated by Nuxeo debian postinst script" > $SELECTIONFILE
    echo "#$(date)" >> $SELECTIONFILE
    echo "$MPSELECTION" >> $SELECTIONFILE

    # If we're still on the same nuxeo version, reactivate other connect packages
    get_conf_var nuxeo.installer.lastinstalledversion
    OLD_DEB_VERSION=$RET
    if [ "$OLD_DEB_VERSION" = "" ]; then
        OLD_DEB_VERSION="0"
    fi
    NEW_NX_VERSION=$(echo $NEW_DEB_VERSION | sed -E 's/^(.*)-.*/\1/')
    OLD_NX_VERSION=$(echo $OLD_DEB_VERSION | sed -E 's/^(.*)-.*/\1/')
    dpkg --compare-versions $OLD_NX_VERSION eq $NEW_NX_VERSION
    SAME_NX_VERSION=$?
    if [ "$SAME_NX_VERSION" = "0" ]; then
        echo "*** Reactivating connect packages (same Nuxeo version) ***"
        PKGTOINSTALL=""
        NAMESTOINSTALL=""
        for pkg in ${!MPIDS[@]}; do
            if [ "${MPSTATES[$pkg]}" != "started" ]; then
                continue
            fi
            IS_DIST_PACKAGE=false
            for distPkg in $MPDISTLIST; do
                if [ "$pkg" = "$distPkg" ]; then
                    # Base marketplace packages are already handled
                    IS_DIST_PACKAGE=true
                fi
            done
            if [ "$IS_DIST_PACKAGE" = "false" ]; then
                PKGTOINSTALL="$PKGTOINSTALL ${MPIDS[$pkg]}"
                NAMESTOINSTALL="$NAMESTOINSTALL $pkg"
            fi
        done
        if [ -n "$PKGTOINSTALL" ]; then
            echo "Trying to reactivate: $NAMESTOINSTALL"
            quietnuxeoctl mp-install $PKGTOINSTALL
        else
            echo "Nothing to do."
        fi
    fi

}

set_last_installed_version() {

    set_conf_var nuxeo.installer.lastinstalledversion @package.fullversion@

}

migrate_from_pre55() {

    # Read user choice
    db_get @package.name@/migrate || true
    if [ "$RET" = "false" ]; then
        return
    fi
    db_get @package.name@/migratepkg || true
    migratepkg=$RET
    # Execute script
    if [ "$migratepkg" = "nuxeo-dm" ]; then
        /usr/lib/@package.name@/internal/migrate-from-pre55 -p dm
    elif [ "$migratepkg" = "nuxeo-dam" ]; then
        /usr/lib/@package.name@/internal/migrate-from-pre55 -p dam
    elif [ "$migratepkg" = "nuxeo-cmf" ]; then
        /usr/lib/@package.name@/internal/migrate-from-pre55 -p cmf
    else
        echo "Something went wrong - can't get name of package to migrate"
        exit 1
    fi
    # Reread config
    get_existing_conf

}

# dpkg-reconfigure
if [ "$1" = "reconfigure" ] || [ "$DEBCONF_RECONFIGURE" ]; then
    configure_paths
    configure_nuxeo
    db_stop
# new install (old version not set)
elif [ "$1" = "configure" ] && [ -z "$2" ]; then
    create_user
    configure_paths
    db_get @package.name@/migrate || true
    migrate=$RET
    if [ "$migrate" = "true" ]; then
        migrate_from_pre55
    else
        configure_nuxeo
        activate_wizard
    fi
    configure_office
    set_last_installed_version
    db_stop
# upgrade (old version set)
elif [ "$1" = "configure" ]; then
    create_user
    configure_paths
    get_existing_conf
    configure_nuxeo
    upgrade_marketplace_packages $2
    set_last_installed_version
    db_stop
# other
elif [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-remove" ] || [ "$1" = "abort-deconfigure" ]; then
    echo "Not doing anything"
else
    echo "postinst called with unknown argument"
    exit 1
fi

#DEBHELPER#
