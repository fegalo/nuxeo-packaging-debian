
# common functions used by the maintainer scripts

NUXEO_CONF="@nuxeo.etc.dir@/nuxeo.conf"
DB_LIST=("default" "postgresql" "oracle" "mssql" "mysql")

DBAUTOPGSQL="Autoconfigure PostgreSQL"
DBCUSTOM="Configure database in wizard"

PGCLUSTER="nuxeodb"
PGDEFAULTVERSION="8.4"


create_user() {
    if ! getent passwd @package.name.clean@  >/dev/null; then
        echo "*** Adding user @package.name.clean@ ***"
        adduser --system --home @nuxeo.home.dir@ \
                --no-create-home \
                --group --shell /bin/bash @package.name.clean@
        echo "ok."
        # Make a note that we've created the user
        set_conf_var nuxeo.installer.installeduser true
        db_set @package.name@/installeduser true
    fi
}

check_ip_port_free() {

    ip=$1
    port=$2
    allips=""
    RET=false
    if [ "$ip" = "0.0.0.0" ] || [ "$ip" = "::" ]; then
        allips="(.*)"
    elif [ "$ip" = "127.0.0.1" ] || [ "$ip" = "::1" ]; then
        allips="(0.0.0.0|::|127.0.0.1|::1)"
    else
        allips="(0.0.0.0|::|$ip)"
    fi
    conflicts=$(netstat -nlt | awk '{print $4}' | grep -E "^$allips:$port$") || true
    if [ -z "$conflicts" ]; then
        RET=true
    fi

}

validate_port_syntax() {

    input=$1
    RET=false
    check=$(echo $input | tr -cd "[:digit:]")
    if [ "$check" = "$input" ]; then
        if [ $check -gt 1023 ] && [ $check -lt 65536 ]; then
            RET=true
        fi
    fi
    if [ -z "$input" ]; then
        RET=false
    fi

}

validate_ip_address() {

    # We just validate the general form
    ip=$1
    RET=false
    v4check=$(echo $ip | grep -E "^([[:digit:]]{1,3}\.){3}[[:digit:]]{1,3}$") || true
    v6check=$(echo $ip | tr -cd "[:xdigit:]:" | grep ":") || true
    if [ "$v4check" = "$ip" ] || [ "$v6check" = "$ip" ]; then
        RET=true
    fi
    if [ -z "$ip" ]; then
        RET=false
    fi

}

get_conf_var() {

    RET=$(grep -E "^$1\s*=" $NUXEO_CONF | cut -d= -f2- | cut -d# -f1 | tr -d ' ' | tail -n 1)

}

set_conf_var() {

    # Note: doesn't handle colon in key or value
    key=$1
    value=$2
    del_conf_var $key
    echo "$key=$value" >> $NUXEO_CONF

}

del_conf_var() {

    # Note: doesn't handle colon in key
    key=$1
    perl -p -i -e "s:^#?$key\s*=(.*)$:#$key=\1:g" $NUXEO_CONF

}

get_templates_list() {

    RET=$(grep -E "^#?nuxeo.templates=" $NUXEO_CONF | cut -d= -f2- | cut -d# -f1 | tr "," " ")

}

get_db_template() {

    get_templates_list
    templates=$RET
    RET="default"
    for t in ${templates[@]}; do
        for d in ${DB_LIST[@]}; do
            if [ "$t" = "$d" ]; then
                RET=$t
                return
            fi
        done
    done
}

set_db_template() {

    get_templates_list
    templates=$RET
    newtemplates=""
    for t in ${templates[@]}; do
        for d in ${DB_LIST[@]}; do
            if [ "$t" = "$d" ]; then
                t="$1"
            fi
        done
        if [ ! -z $newtemplates ]; then
            newtemplates+=","
        fi
        newtemplates+="$t"
    done

    perl -p -i -e "s:^#?nuxeo.templates=.*$:nuxeo.templates=$newtemplates:g" $NUXEO_CONF

}

get_existing_conf() {

    # This sets the defaults from nuxeo.conf

    # If using the PostgreSQL database, check for "autoconf" key
    # to see whether this is a custom PostgreSQL or an "Auto" one.

    get_conf_var nuxeo.bind.address
    if [ ! -z "$RET" ]; then
        db_set @package.name@/bind-address $RET
    fi
    get_conf_var nuxeo.server.http.port
    if [ ! -z "$RET" ]; then
        db_set @package.name@/http-port $RET
    fi
    get_conf_var nuxeo.server.ajp.port
    if [ ! -z "$RET" ]; then
        db_set @package.name@/ajp-port $RET
    fi

    get_conf_var nuxeo.installer.useautopg
    AUTOPG=$RET
    get_db_template
    if [ ! -z "$RET" ]; then
        DB=$RET
        # Database never configured yet -> default = autopg
        if [ "$DB" = "default" -a "$AUTOPG" != "false" ]; then
            db_set @package.name@/database $DBAUTOPGSQL
        # Previous choise was autopg -> default = autopg
        elif [ "$DB" = "postgresql" -a "$AUTOPG" = "true" ]; then
            db_set @package.name@/database $DBAUTOPGSQL
        # Previous choise was custom -> default = custom
        else
            db_set @package.name@/database $DBCUSTOM
        fi
    fi

    get_conf_var nuxeo.installer.installedpg
    if [ ! -z "$RET" ]; then
        db_set @package.name@/installedpg $RET
    fi

    get_conf_var nuxeo.installer.migratefrompre55
    if [ ! -z "$RET" ]; then
        db_set @package.name@/migratefrompre55 $RET
    fi

}


activate_wizard() {

    set_conf_var nuxeo.wizard.done false

}

